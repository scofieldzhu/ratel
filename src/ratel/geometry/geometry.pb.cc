// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry.proto

#include "geometry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ratel {
PROTOBUF_CONSTEXPR Vec2F::Vec2F(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct Vec2FDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vec2FDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vec2FDefaultTypeInternal() {}
  union {
    Vec2F _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vec2FDefaultTypeInternal _Vec2F_default_instance_;
PROTOBUF_CONSTEXPR Vec2fList::Vec2fList(
    ::_pbi::ConstantInitialized)
  : list_(){}
struct Vec2fListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vec2fListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vec2fListDefaultTypeInternal() {}
  union {
    Vec2fList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vec2fListDefaultTypeInternal _Vec2fList_default_instance_;
PROTOBUF_CONSTEXPR Vec2I::Vec2I(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct Vec2IDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vec2IDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vec2IDefaultTypeInternal() {}
  union {
    Vec2I _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vec2IDefaultTypeInternal _Vec2I_default_instance_;
PROTOBUF_CONSTEXPR Vec3F::Vec3F(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Vec3FDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vec3FDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vec3FDefaultTypeInternal() {}
  union {
    Vec3F _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vec3FDefaultTypeInternal _Vec3F_default_instance_;
PROTOBUF_CONSTEXPR Vec3I::Vec3I(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Vec3IDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vec3IDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vec3IDefaultTypeInternal() {}
  union {
    Vec3I _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vec3IDefaultTypeInternal _Vec3I_default_instance_;
PROTOBUF_CONSTEXPR SizeI::SizeI(
    ::_pbi::ConstantInitialized)
  : w_(0u)
  , h_(0u){}
struct SizeIDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SizeIDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SizeIDefaultTypeInternal() {}
  union {
    SizeI _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SizeIDefaultTypeInternal _SizeI_default_instance_;
PROTOBUF_CONSTEXPR SizeF::SizeF(
    ::_pbi::ConstantInitialized)
  : w_(0)
  , h_(0){}
struct SizeFDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SizeFDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SizeFDefaultTypeInternal() {}
  union {
    SizeF _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SizeFDefaultTypeInternal _SizeF_default_instance_;
PROTOBUF_CONSTEXPR Line2I::Line2I(
    ::_pbi::ConstantInitialized)
  : p0_(nullptr)
  , p1_(nullptr){}
struct Line2IDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Line2IDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Line2IDefaultTypeInternal() {}
  union {
    Line2I _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Line2IDefaultTypeInternal _Line2I_default_instance_;
PROTOBUF_CONSTEXPR Line2F::Line2F(
    ::_pbi::ConstantInitialized)
  : p0_(nullptr)
  , p1_(nullptr){}
struct Line2FDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Line2FDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Line2FDefaultTypeInternal() {}
  union {
    Line2F _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Line2FDefaultTypeInternal _Line2F_default_instance_;
PROTOBUF_CONSTEXPR CircleI::CircleI(
    ::_pbi::ConstantInitialized)
  : center_(nullptr)
  , r_(0){}
struct CircleIDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CircleIDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CircleIDefaultTypeInternal() {}
  union {
    CircleI _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CircleIDefaultTypeInternal _CircleI_default_instance_;
PROTOBUF_CONSTEXPR CircleF::CircleF(
    ::_pbi::ConstantInitialized)
  : center_(nullptr)
  , r_(0){}
struct CircleFDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CircleFDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CircleFDefaultTypeInternal() {}
  union {
    CircleF _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CircleFDefaultTypeInternal _CircleF_default_instance_;
PROTOBUF_CONSTEXPR RectI::RectI(
    ::_pbi::ConstantInitialized)
  : lt_(nullptr)
  , size_(nullptr)
  , angle_(0){}
struct RectIDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RectIDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RectIDefaultTypeInternal() {}
  union {
    RectI _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RectIDefaultTypeInternal _RectI_default_instance_;
PROTOBUF_CONSTEXPR RectF::RectF(
    ::_pbi::ConstantInitialized)
  : lt_(nullptr)
  , size_(nullptr)
  , angle_(0){}
struct RectFDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RectFDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RectFDefaultTypeInternal() {}
  union {
    RectF _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RectFDefaultTypeInternal _RectF_default_instance_;
PROTOBUF_CONSTEXPR Poly2I::Poly2I(
    ::_pbi::ConstantInitialized)
  : pts_(){}
struct Poly2IDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Poly2IDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Poly2IDefaultTypeInternal() {}
  union {
    Poly2I _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Poly2IDefaultTypeInternal _Poly2I_default_instance_;
PROTOBUF_CONSTEXPR Poly2F::Poly2F(
    ::_pbi::ConstantInitialized)
  : pts_(){}
struct Poly2FDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Poly2FDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Poly2FDefaultTypeInternal() {}
  union {
    Poly2F _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Poly2FDefaultTypeInternal _Poly2F_default_instance_;
}  // namespace ratel
static ::_pb::Metadata file_level_metadata_geometry_2eproto[15];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_geometry_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_geometry_2eproto = nullptr;

const uint32_t TableStruct_geometry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ratel::Vec2F, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ratel::Vec2F, x_),
  PROTOBUF_FIELD_OFFSET(::ratel::Vec2F, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ratel::Vec2fList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ratel::Vec2fList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ratel::Vec2I, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ratel::Vec2I, x_),
  PROTOBUF_FIELD_OFFSET(::ratel::Vec2I, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ratel::Vec3F, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ratel::Vec3F, x_),
  PROTOBUF_FIELD_OFFSET(::ratel::Vec3F, y_),
  PROTOBUF_FIELD_OFFSET(::ratel::Vec3F, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ratel::Vec3I, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ratel::Vec3I, x_),
  PROTOBUF_FIELD_OFFSET(::ratel::Vec3I, y_),
  PROTOBUF_FIELD_OFFSET(::ratel::Vec3I, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ratel::SizeI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ratel::SizeI, w_),
  PROTOBUF_FIELD_OFFSET(::ratel::SizeI, h_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ratel::SizeF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ratel::SizeF, w_),
  PROTOBUF_FIELD_OFFSET(::ratel::SizeF, h_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ratel::Line2I, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ratel::Line2I, p0_),
  PROTOBUF_FIELD_OFFSET(::ratel::Line2I, p1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ratel::Line2F, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ratel::Line2F, p0_),
  PROTOBUF_FIELD_OFFSET(::ratel::Line2F, p1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ratel::CircleI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ratel::CircleI, center_),
  PROTOBUF_FIELD_OFFSET(::ratel::CircleI, r_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ratel::CircleF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ratel::CircleF, center_),
  PROTOBUF_FIELD_OFFSET(::ratel::CircleF, r_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ratel::RectI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ratel::RectI, lt_),
  PROTOBUF_FIELD_OFFSET(::ratel::RectI, size_),
  PROTOBUF_FIELD_OFFSET(::ratel::RectI, angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ratel::RectF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ratel::RectF, lt_),
  PROTOBUF_FIELD_OFFSET(::ratel::RectF, size_),
  PROTOBUF_FIELD_OFFSET(::ratel::RectF, angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ratel::Poly2I, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ratel::Poly2I, pts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ratel::Poly2F, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ratel::Poly2F, pts_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ratel::Vec2F)},
  { 8, -1, -1, sizeof(::ratel::Vec2fList)},
  { 15, -1, -1, sizeof(::ratel::Vec2I)},
  { 23, -1, -1, sizeof(::ratel::Vec3F)},
  { 32, -1, -1, sizeof(::ratel::Vec3I)},
  { 41, -1, -1, sizeof(::ratel::SizeI)},
  { 49, -1, -1, sizeof(::ratel::SizeF)},
  { 57, -1, -1, sizeof(::ratel::Line2I)},
  { 65, -1, -1, sizeof(::ratel::Line2F)},
  { 73, -1, -1, sizeof(::ratel::CircleI)},
  { 81, -1, -1, sizeof(::ratel::CircleF)},
  { 89, -1, -1, sizeof(::ratel::RectI)},
  { 98, -1, -1, sizeof(::ratel::RectF)},
  { 107, -1, -1, sizeof(::ratel::Poly2I)},
  { 114, -1, -1, sizeof(::ratel::Poly2F)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ratel::_Vec2F_default_instance_._instance,
  &::ratel::_Vec2fList_default_instance_._instance,
  &::ratel::_Vec2I_default_instance_._instance,
  &::ratel::_Vec3F_default_instance_._instance,
  &::ratel::_Vec3I_default_instance_._instance,
  &::ratel::_SizeI_default_instance_._instance,
  &::ratel::_SizeF_default_instance_._instance,
  &::ratel::_Line2I_default_instance_._instance,
  &::ratel::_Line2F_default_instance_._instance,
  &::ratel::_CircleI_default_instance_._instance,
  &::ratel::_CircleF_default_instance_._instance,
  &::ratel::_RectI_default_instance_._instance,
  &::ratel::_RectF_default_instance_._instance,
  &::ratel::_Poly2I_default_instance_._instance,
  &::ratel::_Poly2F_default_instance_._instance,
};

const char descriptor_table_protodef_geometry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016geometry.proto\022\005ratel\"\035\n\005Vec2F\022\t\n\001x\030\001 "
  "\001(\002\022\t\n\001y\030\002 \001(\002\"\'\n\tVec2fList\022\032\n\004list\030\001 \003("
  "\0132\014.ratel.Vec2F\"\035\n\005Vec2I\022\t\n\001x\030\001 \001(\005\022\t\n\001y"
  "\030\002 \001(\005\"(\n\005Vec3F\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n"
  "\001z\030\003 \001(\002\"(\n\005Vec3I\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022"
  "\t\n\001z\030\003 \001(\005\"\035\n\005SizeI\022\t\n\001w\030\001 \001(\r\022\t\n\001h\030\002 \001("
  "\r\"\035\n\005SizeF\022\t\n\001w\030\001 \001(\002\022\t\n\001h\030\002 \001(\002\"<\n\006Line"
  "2I\022\030\n\002p0\030\001 \001(\0132\014.ratel.Vec2I\022\030\n\002p1\030\002 \001(\013"
  "2\014.ratel.Vec2I\"<\n\006Line2F\022\030\n\002p0\030\001 \001(\0132\014.r"
  "atel.Vec2F\022\030\n\002p1\030\002 \001(\0132\014.ratel.Vec2F\"2\n\007"
  "CircleI\022\034\n\006center\030\001 \001(\0132\014.ratel.Vec2I\022\t\n"
  "\001r\030\002 \001(\002\"2\n\007CircleF\022\034\n\006center\030\001 \001(\0132\014.ra"
  "tel.Vec2F\022\t\n\001r\030\002 \001(\002\"L\n\005RectI\022\030\n\002lt\030\001 \001("
  "\0132\014.ratel.Vec2I\022\032\n\004size\030\002 \001(\0132\014.ratel.Si"
  "zeI\022\r\n\005angle\030\003 \001(\002\"L\n\005RectF\022\030\n\002lt\030\001 \001(\0132"
  "\014.ratel.Vec2F\022\032\n\004size\030\002 \001(\0132\014.ratel.Size"
  "F\022\r\n\005angle\030\003 \001(\002\"#\n\006Poly2I\022\031\n\003pts\030\001 \003(\0132"
  "\014.ratel.Vec2I\"#\n\006Poly2F\022\031\n\003pts\030\001 \003(\0132\014.r"
  "atel.Vec2Fb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_geometry_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_geometry_2eproto = {
    false, false, 738, descriptor_table_protodef_geometry_2eproto,
    "geometry.proto",
    &descriptor_table_geometry_2eproto_once, nullptr, 0, 15,
    schemas, file_default_instances, TableStruct_geometry_2eproto::offsets,
    file_level_metadata_geometry_2eproto, file_level_enum_descriptors_geometry_2eproto,
    file_level_service_descriptors_geometry_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_geometry_2eproto_getter() {
  return &descriptor_table_geometry_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_geometry_2eproto(&descriptor_table_geometry_2eproto);
namespace ratel {

// ===================================================================

class Vec2F::_Internal {
 public:
};

Vec2F::Vec2F(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ratel.Vec2F)
}
Vec2F::Vec2F(const Vec2F& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ratel.Vec2F)
}

inline void Vec2F::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vec2F::~Vec2F() {
  // @@protoc_insertion_point(destructor:ratel.Vec2F)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vec2F::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vec2F::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vec2F::Clear() {
// @@protoc_insertion_point(message_clear_start:ratel.Vec2F)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec2F::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vec2F::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratel.Vec2F)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ratel.Vec2F)
  return target;
}

size_t Vec2F::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ratel.Vec2F)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vec2F::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vec2F::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vec2F::GetClassData() const { return &_class_data_; }

void Vec2F::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vec2F *>(to)->MergeFrom(
      static_cast<const Vec2F &>(from));
}


void Vec2F::MergeFrom(const Vec2F& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ratel.Vec2F)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vec2F::CopyFrom(const Vec2F& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ratel.Vec2F)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2F::IsInitialized() const {
  return true;
}

void Vec2F::InternalSwap(Vec2F* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec2F, y_)
      + sizeof(Vec2F::y_)
      - PROTOBUF_FIELD_OFFSET(Vec2F, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec2F::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[0]);
}

// ===================================================================

class Vec2fList::_Internal {
 public:
};

Vec2fList::Vec2fList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ratel.Vec2fList)
}
Vec2fList::Vec2fList(const Vec2fList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ratel.Vec2fList)
}

inline void Vec2fList::SharedCtor() {
}

Vec2fList::~Vec2fList() {
  // @@protoc_insertion_point(destructor:ratel.Vec2fList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vec2fList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vec2fList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vec2fList::Clear() {
// @@protoc_insertion_point(message_clear_start:ratel.Vec2fList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec2fList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ratel.Vec2F list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vec2fList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratel.Vec2fList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ratel.Vec2F list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ratel.Vec2fList)
  return target;
}

size_t Vec2fList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ratel.Vec2fList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ratel.Vec2F list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vec2fList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vec2fList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vec2fList::GetClassData() const { return &_class_data_; }

void Vec2fList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vec2fList *>(to)->MergeFrom(
      static_cast<const Vec2fList &>(from));
}


void Vec2fList::MergeFrom(const Vec2fList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ratel.Vec2fList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vec2fList::CopyFrom(const Vec2fList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ratel.Vec2fList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2fList::IsInitialized() const {
  return true;
}

void Vec2fList::InternalSwap(Vec2fList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec2fList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[1]);
}

// ===================================================================

class Vec2I::_Internal {
 public:
};

Vec2I::Vec2I(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ratel.Vec2I)
}
Vec2I::Vec2I(const Vec2I& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ratel.Vec2I)
}

inline void Vec2I::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vec2I::~Vec2I() {
  // @@protoc_insertion_point(destructor:ratel.Vec2I)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vec2I::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vec2I::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vec2I::Clear() {
// @@protoc_insertion_point(message_clear_start:ratel.Vec2I)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec2I::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vec2I::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratel.Vec2I)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ratel.Vec2I)
  return target;
}

size_t Vec2I::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ratel.Vec2I)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vec2I::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vec2I::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vec2I::GetClassData() const { return &_class_data_; }

void Vec2I::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vec2I *>(to)->MergeFrom(
      static_cast<const Vec2I &>(from));
}


void Vec2I::MergeFrom(const Vec2I& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ratel.Vec2I)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vec2I::CopyFrom(const Vec2I& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ratel.Vec2I)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2I::IsInitialized() const {
  return true;
}

void Vec2I::InternalSwap(Vec2I* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec2I, y_)
      + sizeof(Vec2I::y_)
      - PROTOBUF_FIELD_OFFSET(Vec2I, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec2I::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[2]);
}

// ===================================================================

class Vec3F::_Internal {
 public:
};

Vec3F::Vec3F(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ratel.Vec3F)
}
Vec3F::Vec3F(const Vec3F& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:ratel.Vec3F)
}

inline void Vec3F::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vec3F::~Vec3F() {
  // @@protoc_insertion_point(destructor:ratel.Vec3F)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vec3F::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vec3F::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vec3F::Clear() {
// @@protoc_insertion_point(message_clear_start:ratel.Vec3F)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec3F::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vec3F::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratel.Vec3F)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ratel.Vec3F)
  return target;
}

size_t Vec3F::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ratel.Vec3F)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vec3F::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vec3F::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vec3F::GetClassData() const { return &_class_data_; }

void Vec3F::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vec3F *>(to)->MergeFrom(
      static_cast<const Vec3F &>(from));
}


void Vec3F::MergeFrom(const Vec3F& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ratel.Vec3F)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vec3F::CopyFrom(const Vec3F& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ratel.Vec3F)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3F::IsInitialized() const {
  return true;
}

void Vec3F::InternalSwap(Vec3F* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec3F, z_)
      + sizeof(Vec3F::z_)
      - PROTOBUF_FIELD_OFFSET(Vec3F, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec3F::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[3]);
}

// ===================================================================

class Vec3I::_Internal {
 public:
};

Vec3I::Vec3I(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ratel.Vec3I)
}
Vec3I::Vec3I(const Vec3I& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:ratel.Vec3I)
}

inline void Vec3I::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vec3I::~Vec3I() {
  // @@protoc_insertion_point(destructor:ratel.Vec3I)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vec3I::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vec3I::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vec3I::Clear() {
// @@protoc_insertion_point(message_clear_start:ratel.Vec3I)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec3I::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vec3I::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratel.Vec3I)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 z = 3;
  if (this->_internal_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ratel.Vec3I)
  return target;
}

size_t Vec3I::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ratel.Vec3I)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 z = 3;
  if (this->_internal_z() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_z());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vec3I::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vec3I::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vec3I::GetClassData() const { return &_class_data_; }

void Vec3I::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vec3I *>(to)->MergeFrom(
      static_cast<const Vec3I &>(from));
}


void Vec3I::MergeFrom(const Vec3I& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ratel.Vec3I)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from._internal_z() != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vec3I::CopyFrom(const Vec3I& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ratel.Vec3I)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3I::IsInitialized() const {
  return true;
}

void Vec3I::InternalSwap(Vec3I* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec3I, z_)
      + sizeof(Vec3I::z_)
      - PROTOBUF_FIELD_OFFSET(Vec3I, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec3I::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[4]);
}

// ===================================================================

class SizeI::_Internal {
 public:
};

SizeI::SizeI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ratel.SizeI)
}
SizeI::SizeI(const SizeI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&w_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:ratel.SizeI)
}

inline void SizeI::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&w_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&w_)) + sizeof(h_));
}

SizeI::~SizeI() {
  // @@protoc_insertion_point(destructor:ratel.SizeI)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SizeI::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SizeI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SizeI::Clear() {
// @@protoc_insertion_point(message_clear_start:ratel.SizeI)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&w_)) + sizeof(h_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SizeI::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 h = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SizeI::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratel.SizeI)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 w = 1;
  if (this->_internal_w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_w(), target);
  }

  // uint32 h = 2;
  if (this->_internal_h() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ratel.SizeI)
  return target;
}

size_t SizeI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ratel.SizeI)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 w = 1;
  if (this->_internal_w() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_w());
  }

  // uint32 h = 2;
  if (this->_internal_h() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_h());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SizeI::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SizeI::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SizeI::GetClassData() const { return &_class_data_; }

void SizeI::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SizeI *>(to)->MergeFrom(
      static_cast<const SizeI &>(from));
}


void SizeI::MergeFrom(const SizeI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ratel.SizeI)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_w() != 0) {
    _internal_set_w(from._internal_w());
  }
  if (from._internal_h() != 0) {
    _internal_set_h(from._internal_h());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SizeI::CopyFrom(const SizeI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ratel.SizeI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SizeI::IsInitialized() const {
  return true;
}

void SizeI::InternalSwap(SizeI* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SizeI, h_)
      + sizeof(SizeI::h_)
      - PROTOBUF_FIELD_OFFSET(SizeI, w_)>(
          reinterpret_cast<char*>(&w_),
          reinterpret_cast<char*>(&other->w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SizeI::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[5]);
}

// ===================================================================

class SizeF::_Internal {
 public:
};

SizeF::SizeF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ratel.SizeF)
}
SizeF::SizeF(const SizeF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&w_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:ratel.SizeF)
}

inline void SizeF::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&w_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&w_)) + sizeof(h_));
}

SizeF::~SizeF() {
  // @@protoc_insertion_point(destructor:ratel.SizeF)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SizeF::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SizeF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SizeF::Clear() {
// @@protoc_insertion_point(message_clear_start:ratel.SizeF)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&w_)) + sizeof(h_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SizeF::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float h = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SizeF::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratel.SizeF)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float w = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_w(), target);
  }

  // float h = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_h = this->_internal_h();
  uint32_t raw_h;
  memcpy(&raw_h, &tmp_h, sizeof(tmp_h));
  if (raw_h != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ratel.SizeF)
  return target;
}

size_t SizeF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ratel.SizeF)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float w = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 1 + 4;
  }

  // float h = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_h = this->_internal_h();
  uint32_t raw_h;
  memcpy(&raw_h, &tmp_h, sizeof(tmp_h));
  if (raw_h != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SizeF::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SizeF::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SizeF::GetClassData() const { return &_class_data_; }

void SizeF::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SizeF *>(to)->MergeFrom(
      static_cast<const SizeF &>(from));
}


void SizeF::MergeFrom(const SizeF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ratel.SizeF)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = from._internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _internal_set_w(from._internal_w());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_h = from._internal_h();
  uint32_t raw_h;
  memcpy(&raw_h, &tmp_h, sizeof(tmp_h));
  if (raw_h != 0) {
    _internal_set_h(from._internal_h());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SizeF::CopyFrom(const SizeF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ratel.SizeF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SizeF::IsInitialized() const {
  return true;
}

void SizeF::InternalSwap(SizeF* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SizeF, h_)
      + sizeof(SizeF::h_)
      - PROTOBUF_FIELD_OFFSET(SizeF, w_)>(
          reinterpret_cast<char*>(&w_),
          reinterpret_cast<char*>(&other->w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SizeF::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[6]);
}

// ===================================================================

class Line2I::_Internal {
 public:
  static const ::ratel::Vec2I& p0(const Line2I* msg);
  static const ::ratel::Vec2I& p1(const Line2I* msg);
};

const ::ratel::Vec2I&
Line2I::_Internal::p0(const Line2I* msg) {
  return *msg->p0_;
}
const ::ratel::Vec2I&
Line2I::_Internal::p1(const Line2I* msg) {
  return *msg->p1_;
}
Line2I::Line2I(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ratel.Line2I)
}
Line2I::Line2I(const Line2I& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_p0()) {
    p0_ = new ::ratel::Vec2I(*from.p0_);
  } else {
    p0_ = nullptr;
  }
  if (from._internal_has_p1()) {
    p1_ = new ::ratel::Vec2I(*from.p1_);
  } else {
    p1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ratel.Line2I)
}

inline void Line2I::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&p0_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&p1_) -
    reinterpret_cast<char*>(&p0_)) + sizeof(p1_));
}

Line2I::~Line2I() {
  // @@protoc_insertion_point(destructor:ratel.Line2I)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Line2I::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete p0_;
  if (this != internal_default_instance()) delete p1_;
}

void Line2I::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Line2I::Clear() {
// @@protoc_insertion_point(message_clear_start:ratel.Line2I)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && p0_ != nullptr) {
    delete p0_;
  }
  p0_ = nullptr;
  if (GetArenaForAllocation() == nullptr && p1_ != nullptr) {
    delete p1_;
  }
  p1_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Line2I::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ratel.Vec2I p0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_p0(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ratel.Vec2I p1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_p1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Line2I::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratel.Line2I)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ratel.Vec2I p0 = 1;
  if (this->_internal_has_p0()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::p0(this),
        _Internal::p0(this).GetCachedSize(), target, stream);
  }

  // .ratel.Vec2I p1 = 2;
  if (this->_internal_has_p1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::p1(this),
        _Internal::p1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ratel.Line2I)
  return target;
}

size_t Line2I::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ratel.Line2I)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ratel.Vec2I p0 = 1;
  if (this->_internal_has_p0()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p0_);
  }

  // .ratel.Vec2I p1 = 2;
  if (this->_internal_has_p1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p1_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Line2I::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Line2I::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Line2I::GetClassData() const { return &_class_data_; }

void Line2I::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Line2I *>(to)->MergeFrom(
      static_cast<const Line2I &>(from));
}


void Line2I::MergeFrom(const Line2I& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ratel.Line2I)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_p0()) {
    _internal_mutable_p0()->::ratel::Vec2I::MergeFrom(from._internal_p0());
  }
  if (from._internal_has_p1()) {
    _internal_mutable_p1()->::ratel::Vec2I::MergeFrom(from._internal_p1());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Line2I::CopyFrom(const Line2I& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ratel.Line2I)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line2I::IsInitialized() const {
  return true;
}

void Line2I::InternalSwap(Line2I* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Line2I, p1_)
      + sizeof(Line2I::p1_)
      - PROTOBUF_FIELD_OFFSET(Line2I, p0_)>(
          reinterpret_cast<char*>(&p0_),
          reinterpret_cast<char*>(&other->p0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Line2I::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[7]);
}

// ===================================================================

class Line2F::_Internal {
 public:
  static const ::ratel::Vec2F& p0(const Line2F* msg);
  static const ::ratel::Vec2F& p1(const Line2F* msg);
};

const ::ratel::Vec2F&
Line2F::_Internal::p0(const Line2F* msg) {
  return *msg->p0_;
}
const ::ratel::Vec2F&
Line2F::_Internal::p1(const Line2F* msg) {
  return *msg->p1_;
}
Line2F::Line2F(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ratel.Line2F)
}
Line2F::Line2F(const Line2F& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_p0()) {
    p0_ = new ::ratel::Vec2F(*from.p0_);
  } else {
    p0_ = nullptr;
  }
  if (from._internal_has_p1()) {
    p1_ = new ::ratel::Vec2F(*from.p1_);
  } else {
    p1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ratel.Line2F)
}

inline void Line2F::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&p0_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&p1_) -
    reinterpret_cast<char*>(&p0_)) + sizeof(p1_));
}

Line2F::~Line2F() {
  // @@protoc_insertion_point(destructor:ratel.Line2F)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Line2F::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete p0_;
  if (this != internal_default_instance()) delete p1_;
}

void Line2F::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Line2F::Clear() {
// @@protoc_insertion_point(message_clear_start:ratel.Line2F)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && p0_ != nullptr) {
    delete p0_;
  }
  p0_ = nullptr;
  if (GetArenaForAllocation() == nullptr && p1_ != nullptr) {
    delete p1_;
  }
  p1_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Line2F::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ratel.Vec2F p0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_p0(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ratel.Vec2F p1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_p1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Line2F::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratel.Line2F)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ratel.Vec2F p0 = 1;
  if (this->_internal_has_p0()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::p0(this),
        _Internal::p0(this).GetCachedSize(), target, stream);
  }

  // .ratel.Vec2F p1 = 2;
  if (this->_internal_has_p1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::p1(this),
        _Internal::p1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ratel.Line2F)
  return target;
}

size_t Line2F::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ratel.Line2F)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ratel.Vec2F p0 = 1;
  if (this->_internal_has_p0()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p0_);
  }

  // .ratel.Vec2F p1 = 2;
  if (this->_internal_has_p1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p1_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Line2F::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Line2F::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Line2F::GetClassData() const { return &_class_data_; }

void Line2F::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Line2F *>(to)->MergeFrom(
      static_cast<const Line2F &>(from));
}


void Line2F::MergeFrom(const Line2F& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ratel.Line2F)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_p0()) {
    _internal_mutable_p0()->::ratel::Vec2F::MergeFrom(from._internal_p0());
  }
  if (from._internal_has_p1()) {
    _internal_mutable_p1()->::ratel::Vec2F::MergeFrom(from._internal_p1());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Line2F::CopyFrom(const Line2F& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ratel.Line2F)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line2F::IsInitialized() const {
  return true;
}

void Line2F::InternalSwap(Line2F* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Line2F, p1_)
      + sizeof(Line2F::p1_)
      - PROTOBUF_FIELD_OFFSET(Line2F, p0_)>(
          reinterpret_cast<char*>(&p0_),
          reinterpret_cast<char*>(&other->p0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Line2F::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[8]);
}

// ===================================================================

class CircleI::_Internal {
 public:
  static const ::ratel::Vec2I& center(const CircleI* msg);
};

const ::ratel::Vec2I&
CircleI::_Internal::center(const CircleI* msg) {
  return *msg->center_;
}
CircleI::CircleI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ratel.CircleI)
}
CircleI::CircleI(const CircleI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::ratel::Vec2I(*from.center_);
  } else {
    center_ = nullptr;
  }
  r_ = from.r_;
  // @@protoc_insertion_point(copy_constructor:ratel.CircleI)
}

inline void CircleI::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&center_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&r_) -
    reinterpret_cast<char*>(&center_)) + sizeof(r_));
}

CircleI::~CircleI() {
  // @@protoc_insertion_point(destructor:ratel.CircleI)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CircleI::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete center_;
}

void CircleI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CircleI::Clear() {
// @@protoc_insertion_point(message_clear_start:ratel.CircleI)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  r_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CircleI::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ratel.Vec2I center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float r = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CircleI::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratel.CircleI)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ratel.Vec2I center = 1;
  if (this->_internal_has_center()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::center(this),
        _Internal::center(this).GetCachedSize(), target, stream);
  }

  // float r = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = this->_internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_r(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ratel.CircleI)
  return target;
}

size_t CircleI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ratel.CircleI)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ratel.Vec2I center = 1;
  if (this->_internal_has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // float r = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = this->_internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CircleI::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CircleI::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CircleI::GetClassData() const { return &_class_data_; }

void CircleI::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CircleI *>(to)->MergeFrom(
      static_cast<const CircleI &>(from));
}


void CircleI::MergeFrom(const CircleI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ratel.CircleI)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_center()) {
    _internal_mutable_center()->::ratel::Vec2I::MergeFrom(from._internal_center());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = from._internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    _internal_set_r(from._internal_r());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CircleI::CopyFrom(const CircleI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ratel.CircleI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircleI::IsInitialized() const {
  return true;
}

void CircleI::InternalSwap(CircleI* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CircleI, r_)
      + sizeof(CircleI::r_)
      - PROTOBUF_FIELD_OFFSET(CircleI, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CircleI::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[9]);
}

// ===================================================================

class CircleF::_Internal {
 public:
  static const ::ratel::Vec2F& center(const CircleF* msg);
};

const ::ratel::Vec2F&
CircleF::_Internal::center(const CircleF* msg) {
  return *msg->center_;
}
CircleF::CircleF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ratel.CircleF)
}
CircleF::CircleF(const CircleF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::ratel::Vec2F(*from.center_);
  } else {
    center_ = nullptr;
  }
  r_ = from.r_;
  // @@protoc_insertion_point(copy_constructor:ratel.CircleF)
}

inline void CircleF::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&center_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&r_) -
    reinterpret_cast<char*>(&center_)) + sizeof(r_));
}

CircleF::~CircleF() {
  // @@protoc_insertion_point(destructor:ratel.CircleF)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CircleF::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete center_;
}

void CircleF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CircleF::Clear() {
// @@protoc_insertion_point(message_clear_start:ratel.CircleF)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  r_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CircleF::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ratel.Vec2F center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float r = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CircleF::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratel.CircleF)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ratel.Vec2F center = 1;
  if (this->_internal_has_center()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::center(this),
        _Internal::center(this).GetCachedSize(), target, stream);
  }

  // float r = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = this->_internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_r(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ratel.CircleF)
  return target;
}

size_t CircleF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ratel.CircleF)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ratel.Vec2F center = 1;
  if (this->_internal_has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // float r = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = this->_internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CircleF::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CircleF::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CircleF::GetClassData() const { return &_class_data_; }

void CircleF::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CircleF *>(to)->MergeFrom(
      static_cast<const CircleF &>(from));
}


void CircleF::MergeFrom(const CircleF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ratel.CircleF)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_center()) {
    _internal_mutable_center()->::ratel::Vec2F::MergeFrom(from._internal_center());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = from._internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    _internal_set_r(from._internal_r());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CircleF::CopyFrom(const CircleF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ratel.CircleF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircleF::IsInitialized() const {
  return true;
}

void CircleF::InternalSwap(CircleF* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CircleF, r_)
      + sizeof(CircleF::r_)
      - PROTOBUF_FIELD_OFFSET(CircleF, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CircleF::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[10]);
}

// ===================================================================

class RectI::_Internal {
 public:
  static const ::ratel::Vec2I& lt(const RectI* msg);
  static const ::ratel::SizeI& size(const RectI* msg);
};

const ::ratel::Vec2I&
RectI::_Internal::lt(const RectI* msg) {
  return *msg->lt_;
}
const ::ratel::SizeI&
RectI::_Internal::size(const RectI* msg) {
  return *msg->size_;
}
RectI::RectI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ratel.RectI)
}
RectI::RectI(const RectI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lt()) {
    lt_ = new ::ratel::Vec2I(*from.lt_);
  } else {
    lt_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::ratel::SizeI(*from.size_);
  } else {
    size_ = nullptr;
  }
  angle_ = from.angle_;
  // @@protoc_insertion_point(copy_constructor:ratel.RectI)
}

inline void RectI::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lt_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&lt_)) + sizeof(angle_));
}

RectI::~RectI() {
  // @@protoc_insertion_point(destructor:ratel.RectI)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RectI::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lt_;
  if (this != internal_default_instance()) delete size_;
}

void RectI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RectI::Clear() {
// @@protoc_insertion_point(message_clear_start:ratel.RectI)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && lt_ != nullptr) {
    delete lt_;
  }
  lt_ = nullptr;
  if (GetArenaForAllocation() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  angle_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RectI::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ratel.Vec2I lt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ratel.SizeI size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RectI::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratel.RectI)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ratel.Vec2I lt = 1;
  if (this->_internal_has_lt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::lt(this),
        _Internal::lt(this).GetCachedSize(), target, stream);
  }

  // .ratel.SizeI size = 2;
  if (this->_internal_has_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  // float angle = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ratel.RectI)
  return target;
}

size_t RectI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ratel.RectI)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ratel.Vec2I lt = 1;
  if (this->_internal_has_lt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lt_);
  }

  // .ratel.SizeI size = 2;
  if (this->_internal_has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // float angle = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RectI::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RectI::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RectI::GetClassData() const { return &_class_data_; }

void RectI::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RectI *>(to)->MergeFrom(
      static_cast<const RectI &>(from));
}


void RectI::MergeFrom(const RectI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ratel.RectI)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lt()) {
    _internal_mutable_lt()->::ratel::Vec2I::MergeFrom(from._internal_lt());
  }
  if (from._internal_has_size()) {
    _internal_mutable_size()->::ratel::SizeI::MergeFrom(from._internal_size());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = from._internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    _internal_set_angle(from._internal_angle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RectI::CopyFrom(const RectI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ratel.RectI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectI::IsInitialized() const {
  return true;
}

void RectI::InternalSwap(RectI* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RectI, angle_)
      + sizeof(RectI::angle_)
      - PROTOBUF_FIELD_OFFSET(RectI, lt_)>(
          reinterpret_cast<char*>(&lt_),
          reinterpret_cast<char*>(&other->lt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RectI::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[11]);
}

// ===================================================================

class RectF::_Internal {
 public:
  static const ::ratel::Vec2F& lt(const RectF* msg);
  static const ::ratel::SizeF& size(const RectF* msg);
};

const ::ratel::Vec2F&
RectF::_Internal::lt(const RectF* msg) {
  return *msg->lt_;
}
const ::ratel::SizeF&
RectF::_Internal::size(const RectF* msg) {
  return *msg->size_;
}
RectF::RectF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ratel.RectF)
}
RectF::RectF(const RectF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lt()) {
    lt_ = new ::ratel::Vec2F(*from.lt_);
  } else {
    lt_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::ratel::SizeF(*from.size_);
  } else {
    size_ = nullptr;
  }
  angle_ = from.angle_;
  // @@protoc_insertion_point(copy_constructor:ratel.RectF)
}

inline void RectF::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lt_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&lt_)) + sizeof(angle_));
}

RectF::~RectF() {
  // @@protoc_insertion_point(destructor:ratel.RectF)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RectF::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lt_;
  if (this != internal_default_instance()) delete size_;
}

void RectF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RectF::Clear() {
// @@protoc_insertion_point(message_clear_start:ratel.RectF)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && lt_ != nullptr) {
    delete lt_;
  }
  lt_ = nullptr;
  if (GetArenaForAllocation() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  angle_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RectF::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ratel.Vec2F lt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ratel.SizeF size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RectF::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratel.RectF)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ratel.Vec2F lt = 1;
  if (this->_internal_has_lt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::lt(this),
        _Internal::lt(this).GetCachedSize(), target, stream);
  }

  // .ratel.SizeF size = 2;
  if (this->_internal_has_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  // float angle = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ratel.RectF)
  return target;
}

size_t RectF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ratel.RectF)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ratel.Vec2F lt = 1;
  if (this->_internal_has_lt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lt_);
  }

  // .ratel.SizeF size = 2;
  if (this->_internal_has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // float angle = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RectF::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RectF::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RectF::GetClassData() const { return &_class_data_; }

void RectF::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RectF *>(to)->MergeFrom(
      static_cast<const RectF &>(from));
}


void RectF::MergeFrom(const RectF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ratel.RectF)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lt()) {
    _internal_mutable_lt()->::ratel::Vec2F::MergeFrom(from._internal_lt());
  }
  if (from._internal_has_size()) {
    _internal_mutable_size()->::ratel::SizeF::MergeFrom(from._internal_size());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = from._internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    _internal_set_angle(from._internal_angle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RectF::CopyFrom(const RectF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ratel.RectF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectF::IsInitialized() const {
  return true;
}

void RectF::InternalSwap(RectF* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RectF, angle_)
      + sizeof(RectF::angle_)
      - PROTOBUF_FIELD_OFFSET(RectF, lt_)>(
          reinterpret_cast<char*>(&lt_),
          reinterpret_cast<char*>(&other->lt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RectF::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[12]);
}

// ===================================================================

class Poly2I::_Internal {
 public:
};

Poly2I::Poly2I(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pts_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ratel.Poly2I)
}
Poly2I::Poly2I(const Poly2I& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pts_(from.pts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ratel.Poly2I)
}

inline void Poly2I::SharedCtor() {
}

Poly2I::~Poly2I() {
  // @@protoc_insertion_point(destructor:ratel.Poly2I)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Poly2I::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Poly2I::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Poly2I::Clear() {
// @@protoc_insertion_point(message_clear_start:ratel.Poly2I)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Poly2I::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ratel.Vec2I pts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Poly2I::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratel.Poly2I)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ratel.Vec2I pts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pts_size()); i < n; i++) {
    const auto& repfield = this->_internal_pts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ratel.Poly2I)
  return target;
}

size_t Poly2I::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ratel.Poly2I)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ratel.Vec2I pts = 1;
  total_size += 1UL * this->_internal_pts_size();
  for (const auto& msg : this->pts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Poly2I::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Poly2I::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Poly2I::GetClassData() const { return &_class_data_; }

void Poly2I::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Poly2I *>(to)->MergeFrom(
      static_cast<const Poly2I &>(from));
}


void Poly2I::MergeFrom(const Poly2I& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ratel.Poly2I)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pts_.MergeFrom(from.pts_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Poly2I::CopyFrom(const Poly2I& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ratel.Poly2I)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Poly2I::IsInitialized() const {
  return true;
}

void Poly2I::InternalSwap(Poly2I* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pts_.InternalSwap(&other->pts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Poly2I::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[13]);
}

// ===================================================================

class Poly2F::_Internal {
 public:
};

Poly2F::Poly2F(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pts_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ratel.Poly2F)
}
Poly2F::Poly2F(const Poly2F& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pts_(from.pts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ratel.Poly2F)
}

inline void Poly2F::SharedCtor() {
}

Poly2F::~Poly2F() {
  // @@protoc_insertion_point(destructor:ratel.Poly2F)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Poly2F::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Poly2F::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Poly2F::Clear() {
// @@protoc_insertion_point(message_clear_start:ratel.Poly2F)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Poly2F::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ratel.Vec2F pts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Poly2F::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratel.Poly2F)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ratel.Vec2F pts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pts_size()); i < n; i++) {
    const auto& repfield = this->_internal_pts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ratel.Poly2F)
  return target;
}

size_t Poly2F::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ratel.Poly2F)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ratel.Vec2F pts = 1;
  total_size += 1UL * this->_internal_pts_size();
  for (const auto& msg : this->pts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Poly2F::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Poly2F::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Poly2F::GetClassData() const { return &_class_data_; }

void Poly2F::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Poly2F *>(to)->MergeFrom(
      static_cast<const Poly2F &>(from));
}


void Poly2F::MergeFrom(const Poly2F& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ratel.Poly2F)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pts_.MergeFrom(from.pts_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Poly2F::CopyFrom(const Poly2F& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ratel.Poly2F)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Poly2F::IsInitialized() const {
  return true;
}

void Poly2F::InternalSwap(Poly2F* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pts_.InternalSwap(&other->pts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Poly2F::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry_2eproto_getter, &descriptor_table_geometry_2eproto_once,
      file_level_metadata_geometry_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ratel
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ratel::Vec2F*
Arena::CreateMaybeMessage< ::ratel::Vec2F >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ratel::Vec2F >(arena);
}
template<> PROTOBUF_NOINLINE ::ratel::Vec2fList*
Arena::CreateMaybeMessage< ::ratel::Vec2fList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ratel::Vec2fList >(arena);
}
template<> PROTOBUF_NOINLINE ::ratel::Vec2I*
Arena::CreateMaybeMessage< ::ratel::Vec2I >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ratel::Vec2I >(arena);
}
template<> PROTOBUF_NOINLINE ::ratel::Vec3F*
Arena::CreateMaybeMessage< ::ratel::Vec3F >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ratel::Vec3F >(arena);
}
template<> PROTOBUF_NOINLINE ::ratel::Vec3I*
Arena::CreateMaybeMessage< ::ratel::Vec3I >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ratel::Vec3I >(arena);
}
template<> PROTOBUF_NOINLINE ::ratel::SizeI*
Arena::CreateMaybeMessage< ::ratel::SizeI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ratel::SizeI >(arena);
}
template<> PROTOBUF_NOINLINE ::ratel::SizeF*
Arena::CreateMaybeMessage< ::ratel::SizeF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ratel::SizeF >(arena);
}
template<> PROTOBUF_NOINLINE ::ratel::Line2I*
Arena::CreateMaybeMessage< ::ratel::Line2I >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ratel::Line2I >(arena);
}
template<> PROTOBUF_NOINLINE ::ratel::Line2F*
Arena::CreateMaybeMessage< ::ratel::Line2F >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ratel::Line2F >(arena);
}
template<> PROTOBUF_NOINLINE ::ratel::CircleI*
Arena::CreateMaybeMessage< ::ratel::CircleI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ratel::CircleI >(arena);
}
template<> PROTOBUF_NOINLINE ::ratel::CircleF*
Arena::CreateMaybeMessage< ::ratel::CircleF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ratel::CircleF >(arena);
}
template<> PROTOBUF_NOINLINE ::ratel::RectI*
Arena::CreateMaybeMessage< ::ratel::RectI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ratel::RectI >(arena);
}
template<> PROTOBUF_NOINLINE ::ratel::RectF*
Arena::CreateMaybeMessage< ::ratel::RectF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ratel::RectF >(arena);
}
template<> PROTOBUF_NOINLINE ::ratel::Poly2I*
Arena::CreateMaybeMessage< ::ratel::Poly2I >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ratel::Poly2I >(arena);
}
template<> PROTOBUF_NOINLINE ::ratel::Poly2F*
Arena::CreateMaybeMessage< ::ratel::Poly2F >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ratel::Poly2F >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
